const express=require('express');
const mysql=require('mysql');
const Sequelize=require('sequelize');
const jwt=require('jsonwebtoken');
const User1=require('./model/userModel');
const app=express();
app.use(express.json());

app.post('/login',async(req,res,next) => {
    let{email,password}=req.body;
    let existingUser;
    try{
        existingUser=await User1.findOne({
           where : {email:email}
        });
    }catch{
const error = new Error ("Error! something went wrong");
return next(error);
    }
    if(!existingUser || existingUser.password != password){
        const error = Error("Wrong Details please check");
        return next(error);
    }
let token; 
try{
    token=jwt.sign(
        {userid:existingUser.id,
            email:existingUser.email

        },
'secretkeyhere',
{
    expiresIn:'1h'
}
    );
}
catch(err){
    console.log(err);
    const error=new Error('error! something went wrong');
    return next(error);
}
res.status(200)
.json({
    success:true,
    data:{
        userId:existingUser.id,
        email:existingUser.email,
        token:token,
    },
});
});

// handling post request
app.post('/signup',async(req,res,next)=>{
    const {name,email,password}=req.body;
    const newUser1=new User1({
        name,
        email,
        password,
    });
    try{
        let userData =await User1.create(newUser1);
    }catch{
        const error=new Error ('error ! something went wrong');
        return next(error);
    }
    let token;
    try{
        token=jwt.sign(
            {
                userId:newUser1.id,
                email:newUser1.email
            },
            'secretkeyhere',
            {
                expiresIn:'1h'
            }
        );
    }catch(err){
        const error=new Error('error! something went wrong');
        return next(error);
    }
    res.status(201).json({
        success:true,
        data:{
            userId:newUser1.id,
            email:newUser1.email,
            token:token
        },
    });


});
app.get('/accessResource', (req, res)=>{  
    const token = req.headers.authorization.split(' ')[1]; 
    //Authorization: 'Bearer TOKEN'
    if(!token)
    {
        res.status(200).json({success:false, message: "Error! Token was not provided."});
    }
    //Decoding the token
    const decodedToken = jwt.verify(token,'secretkeyhere' );
    res.status(200).json({success:true, data:{userId:decodedToken.userId,
     email: decodedToken.email },
    });  
});

let PORT=process.env.PORT || 3000
app.listen(PORT,()=>{
        console.log('server is listening on port 3000')
    })